<?php

/**
 * This file has been auto-generated by REST Compile.
 *
 * You should not modify it, unless you know what you do. Any modification
 * might cause serious damage, or even destroy your computer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


// class auto-generated by REST Compile
class RestRequest {

  // constructor
  public function __construct() {

  }

  // the POST function
  public function doPostCall($request, $postArgs) {

    // initialize the session
    $ch = curl_init($request);

    // set curl options
    curl_setopt ($ch, CURLOPT_POST, true);
    curl_setopt ($ch, CURLOPT_POSTFIELDS, $postArgs);
    curl_setopt($ch, CURLOPT_HEADER, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    // do the POST and then close the session
    $response = curl_exec($ch);
    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
    $headers = substr($response, 0, $header_size - 4);
    $body = substr($response, $header_size);
    curl_close($ch);

    return $this->checkResponse($headers, $body);
  }

  // the GET function
  public function doGetCall($request) {

    // initialize the session
    $ch = curl_init($request);

    // set curl options
    curl_setopt($ch, CURLOPT_HEADER, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    // do the GET and then close the session
    $response = curl_exec($ch);
    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
    $headers = substr($response, 0, $header_size - 4);
    $body = substr($response, $header_size);
    curl_close($ch);

    return $this->checkResponse($headers, $body);

  }

  // checks the status code of the response
  private function checkResponse($headers, $body) {

    $status_code = array();
    preg_match('/\d\d\d/', $headers, $status_code);
    if (isset ($status_code)) {
      switch($status_code[0]) {
        case 200:
            break; //success
      }
    }

    return $body;

  }



   // prepares the POST or GET parameters
  private function prepareParams() {

    $paramString = '';


    // strip off the first '&'
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString;

  }

  // submits the request
  public function submit($requestUri) {

//    $requestUri = 'http://api.spreadshirt.net/api/v1/shops/264433/articles/7371156';

    $response = $this->doGetCall($requestUri . '?' . $this->prepareParams());

    return $response;

  }

  // dynamic get and set thanks to the magic of __call
  private function __call($method, $arguments) {

    $prefix = strtolower(substr($method, 0, 3));
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4);

    if ((empty($prefix)) || (empty($property))) {
      return;
    }

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist
    if (!isset($this->$property)) {
      $property = '_' . $property;
    }
    if (!isset($this->$property)) {
       $property = '_T' . substr($property, 1);
    }
    if (!isset($this->$property)) {
      return;
    }

    // now set or get the property
    if ($prefix == "get") {
      return $this->$property;
    }
    if ($prefix == "set") {
      $this->$property = $arguments[0];
      return $this;
    }

  }


}
?>